echo "create lesson4.c ..."
if [ "1" ] ; then 
echo '//'
echo '// This code was created by Jeff Molofee '"'"'99 (ported to Linux/GLUT by Richard Campbell '"'"'99)'
echo '//'
echo '// If you'"'"'ve found this code useful, please let me know.'
echo '//'
echo '// Visit me at www.demonews.com/hosted/nehe '
echo '// (email Richard Campbell at ulmont@bellsouth.net)'
echo '//'
echo '#include <GL/glut.h>    // Header File For The GLUT Library '
echo '#include <GL/gl.h>	// Header File For The OpenGL32 Library'
echo '#include <GL/glu.h>	// Header File For The GLu32 Library'
echo '#include <unistd.h>     // Header File For sleeping.'
echo ''
echo '/* ASCII code for the escape key. */'
echo '#define ESCAPE 27'
echo ''
echo '/* The number of our GLUT window */'
echo 'int window; '
echo ''
echo '/* rotation angle for the triangle. */'
echo 'float rtri = 0.0f;'
echo ''
echo '/* rotation angle for the quadrilateral. */'
echo 'float rquad = 0.0f;'
echo ''
echo '/* A general OpenGL initialization function.  Sets all of the initial parameters. */'
echo 'void InitGL(int Width, int Height)	        // We call this right after our OpenGL window is created.'
echo '{'
echo '  glClearColor(0.0f, 0.0f, 0.0f, 0.0f);		// This Will Clear The Background Color To Black'
echo '  glClearDepth(1.0);				// Enables Clearing Of The Depth Buffer'
echo '  glDepthFunc(GL_LESS);				// The Type Of Depth Test To Do'
echo '  glEnable(GL_DEPTH_TEST);			// Enables Depth Testing'
echo '  glShadeModel(GL_SMOOTH);			// Enables Smooth Color Shading'
echo ''
echo '  glMatrixMode(GL_PROJECTION);'
echo '  glLoadIdentity();				// Reset The Projection Matrix'
echo ''
echo '  gluPerspective(45.0f,(GLfloat)Width/(GLfloat)Height,0.1f,100.0f);	// Calculate The Aspect Ratio Of The Window'
echo ''
echo '  glMatrixMode(GL_MODELVIEW);'
echo '}'
echo ''
echo '/* The function called when our window is resized (which shouldn'"'"'t happen, because we'"'"'re fullscreen) */'
echo 'void ReSizeGLScene(int Width, int Height)'
echo '{'
echo '  if (Height==0)				// Prevent A Divide By Zero If The Window Is Too Small'
echo '    Height=1;'
echo ''
echo '  glViewport(0, 0, Width, Height);		// Reset The Current Viewport And Perspective Transformation'
echo ''
echo '  glMatrixMode(GL_PROJECTION);'
echo '  glLoadIdentity();'
echo ''
echo '  gluPerspective(45.0f,(GLfloat)Width/(GLfloat)Height,0.1f,100.0f);'
echo '  glMatrixMode(GL_MODELVIEW);'
echo '}'
echo ''
echo '/* The main drawing function. */'
echo 'void DrawGLScene()'
echo '{'
echo '  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);		// Clear The Screen And The Depth Buffer'
echo '  glLoadIdentity();				// Reset The View'
echo ''
echo '  glTranslatef(-1.5f,0.0f,-6.0f);		// Move Left 1.5 Units And Into The Screen 6.0'
echo '	'
echo '  glRotatef(rtri,0.0f,1.0f,0.0f);		// Rotate The Triangle On The Y axis '
echo '  // draw a triangle (in smooth coloring mode)'
echo '  glBegin(GL_POLYGON);				// start drawing a polygon'
echo '  glColor3f(1.0f,0.0f,0.0f);			// Set The Color To Red'
echo '  glVertex3f( 0.0f, 1.0f, 0.0f);		// Top'
echo '  glColor3f(0.0f,1.0f,0.0f);			// Set The Color To Green'
echo '  glVertex3f( 1.0f,-1.0f, 0.0f);		// Bottom Right'
echo '  glColor3f(0.0f,0.0f,1.0f);			// Set The Color To Blue'
echo '  glVertex3f(-1.0f,-1.0f, 0.0f);		// Bottom Left	'
echo '  glEnd();					// we'"'"'re done with the polygon (smooth color interpolation)'
echo ''
echo '  glLoadIdentity();				// make sure we'"'"'re no longer rotated.'
echo '  glTranslatef(1.5f,0.0f,-6.0f);		// Move Right 3 Units, and back into the screen 6.0'
echo '	'
echo '  glRotatef(rquad,1.0f,0.0f,0.0f);		// Rotate The Quad On The X axis '
echo '  // draw a square (quadrilateral)'
echo '  glColor3f(0.5f,0.5f,1.0f);			// set color to a blue shade.'
echo '  glBegin(GL_QUADS);				// start drawing a polygon (4 sided)'
echo '  glVertex3f(-1.0f, 1.0f, 0.0f);		// Top Left'
echo '  glVertex3f( 1.0f, 1.0f, 0.0f);		// Top Right'
echo '  glVertex3f( 1.0f,-1.0f, 0.0f);		// Bottom Right'
echo '  glVertex3f(-1.0f,-1.0f, 0.0f);		// Bottom Left	'
echo '  glEnd();					// done with the polygon'
echo ''
echo '  rtri+=15.0f;					// Increase The Rotation Variable For The Triangle'
echo '  rquad-=15.0f;					// Decrease The Rotation Variable For The Quad '
echo ''
echo '  // swap the buffers to display, since double buffering is used.'
echo '  glutSwapBuffers();'
echo '}'
echo ''
echo '/* The function called whenever a key is pressed. */'
echo 'void keyPressed(unsigned char key, int x, int y) '
echo '{'
echo '    /* sleep to avoid thrashing this procedure */'
echo '    usleep(100);'
echo ''
echo '    /* If escape is pressed, kill everything. */'
echo '    if (key == ESCAPE) '
echo '    { '
echo '	/* shut down our window */'
echo '	glutDestroyWindow(window); '
echo '	'
echo '	/* exit the program...normal termination. */'
echo '	exit(0);                   '
echo '    }'
echo '}'
echo ''
echo 'int main(int argc, char **argv) '
echo '{  '
echo '  /* Initialize GLUT state - glut will take any command line arguments that pertain to it or '
echo '     X Windows - look at its documentation at http://reality.sgi.com/mjk/spec3/spec3.html */  '
echo '  glutInit(&argc, argv);  '
echo ''
echo '  /* Select type of Display mode:   '
echo '     Double buffer '
echo '     RGBA color'
echo '     Alpha components supported '
echo '     Depth buffer */  '
echo '  glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_ALPHA | GLUT_DEPTH);  '
echo ''
echo '  /* get a 640 x 480 window */'
echo '  glutInitWindowSize(640, 480);  '
echo ''
echo '  /* the window starts at the upper left corner of the screen */'
echo '  glutInitWindowPosition(0, 0);  '
echo ''
echo '  /* Open a window */  '
echo '  window = glutCreateWindow("Jeff Molofee'"'"'s GL Code Tutorial ... NeHe '"'"'99");  '
echo ''
echo '  /* Register the function to do all our OpenGL drawing. */'
echo '  glutDisplayFunc(&DrawGLScene);  '
echo ''
echo '  /* Go fullscreen.  This is as soon as possible. */'
echo '  glutFullScreen();'
echo ''
echo '  /* Even if there are no events, redraw our gl scene. */'
echo '  glutIdleFunc(&DrawGLScene);'
echo ''
echo '  /* Register the function called when our window is resized. */'
echo '  glutReshapeFunc(&ReSizeGLScene);'
echo ''
echo '  /* Register the function called when the keyboard is pressed. */'
echo '  glutKeyboardFunc(&keyPressed);'
echo ''
echo '  /* Initialize our window. */'
echo '  InitGL(640, 480);'
echo '  '
echo '  /* Start Event Processing Engine */  '
echo '  glutMainLoop();  '
echo ''
echo '  return 1;'
echo '}'
fi > lesson4.c

echo "create makefile ..."
if [ "1" ] ; then 
echo 'INCLUDE = -I/usr/include/'
echo 'LIBDIR  = -L/usr/X11R6/lib '
echo ''
echo 'COMPILERFLAGS = -Wall'
echo 'CC = gcc'
echo 'CFLAGS = $(COMPILERFLAGS) $(INCLUDE)'
echo 'LIBRARIES = -lX11 -lXi -lXmu -lglut -lGL -lGLU -lm '
echo ''
echo '# for all, set the targets to be every lesson1.c-lesson13.c '
echo '# file, removing the .c extension.  That is, at this point,'
echo '# it would produce lesson1, lesson2, lesson3,...,lesson13 targets.'
echo '#'
echo 'all: $(basename $(wildcard lesson[1-9].c lesson1[0-3].c))'
echo ''
echo '# same as for all, except set the targets to be '
echo '# lessonX.tar.gz from lessonX.c.  This is really'
echo '# only used to build smaller tutorial .tar.gz files'
echo '# to send to nehe.'
echo '#'
echo 'dist: $(foreach file,$(basename $(wildcard lesson[1-9].c lesson1[0-3].c)),$(file).tar.gz)'
echo ''
echo '# to produce, say, lesson1.tar.gz:'
echo '#'
echo '# 1. remove lesson1.tar.gz'
echo '# 2. build lesson1.tar containing README, makefile, lesson1.c, Data/lesson1/*.'
echo '# 3. gzip lesson1.tar.'
echo '#'
echo 'lesson%.tar.gz : '
echo '	tar cvf $(subst .tar.gz,.tar,$@) README makefile $(subst .tar.gz,.c,$@) $(wildcard Data/$(subst .tar.gz,,$@)/*); \'
echo '	gzip $(subst .tar.gz,.tar,$@);'
echo ''
echo '# to produce, say, lesson1:'
echo '#'
echo '# 1. compile the thing.  uses the variables defined above.'
echo '# '
echo 'lesson% : lesson%.o'
echo '	$(CC) $(CFLAGS) -o $@ $(LIBDIR) $< $(LIBRARIES)  '
echo ''
echo '# to clean up:'
echo '# delete all of the lessonX files.'
echo 'clean:'
echo '	rm $(wildcard lesson[1-9] lesson1[0-3])'
echo ''
echo '# to clean up the distributions:'
echo '# delete all of the lessonX.tar.gz files.'
echo 'distclean:'
echo '	rm $(wildcard lesson[1-9].tar.gz lesson1[0-3].tar.gz)'
echo ''
fi > makefile

