echo "create lesson6.c ..."
if [ "1" ] ; then 
echo '//'
echo '// This code was created by Jeff Molofee '"'"'99'
echo '//'
echo '// If you'"'"'ve found this code useful, please let me know.'
echo '//'
echo '// Visit me at www.demonews.com/hosted/nehe'
echo '//'
echo '/**************************************************************/'
echo '// This code was ported to MacOS by Tony Parker.'
echo '//  I'"'"'d also appreciate it if you could drop me a line if you found'
echo '//  this code useful. '
echo '// '
echo '//  Tony Parker - asp@usc.edu'
echo '// '
echo '// Have a nice day.'
echo ''
echo '#include <stdio.h>			// Header File For Standard Input / Output'
echo '#include <stdarg.h>			// Header File For Variable Argument Routines'
echo '#include <string.h>			// Header File For String Management'
echo '#include <stdlib.h>'
echo '#include <GL/gl.h>				// Header File For The OpenGL32 Library'
echo '#include <GL/glu.h>			// Header File For The GLu32 Library'
echo '#include <GL/glut.h>			// Header File For The GLUT Library'
echo ''
echo '// Constants -----------------------------------------------------------------'
echo ''
echo '#define kWindowWidth	512'
echo '#define kWindowHeight	256'
echo '#define false           0;'
echo '#define true            1;'
echo 'typedef int bool;'
echo ''
echo '// Structures ----------------------------------------------------------------'
echo ''
echo 'typedef struct TextureImage				// Create A Structure'
echo '{'
echo '	GLubyte	*imageData;		// Image Data (Up To 32 Bits)'
echo '	GLuint	bpp;			// Image Color Depth In Bits Per Pixel.'
echo '	GLuint	width;			// Image Width'
echo '	GLuint	height;			// Image Height'
echo '	GLuint	texID;			// Texture ID Used To Select A Texture'
echo '} TextureImage;				// Structure Name'
echo ''
echo '// Function Prototypes -------------------------------------------------------'
echo ''
echo 'GLvoid InitGL(GLvoid);'
echo 'GLvoid DrawGLScene(GLvoid);'
echo 'GLvoid ReSizeGLScene(int Width, int Height);'
echo 'GLvoid Idle(GLvoid);'
echo 'bool LoadTGA(TextureImage *texture, char *filename);'
echo 'GLvoid LoadGLTextures(GLvoid);'
echo ''
echo '// Global Variables ----------------------------------------------------------'
echo ''
echo 'TextureImage 	texture[1];		// Texture Storage ( NEW )'
echo ''
echo 'GLfloat			xrot;			// X Rotation ( NEW )'
echo 'GLfloat			yrot;			// Y Rotation ( NEW )'
echo 'GLfloat			zrot;			// Z Rotation ( NEW )'
echo ''
echo '// Main ----------------------------------------------------------------------'
echo ''
echo 'int main(int argc, char** argv)'
echo '{'
echo '	'
echo '    glutInit(&argc, argv);'
echo '    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);'
echo '    glutInitWindowSize(kWindowWidth, kWindowHeight); '
echo '    glutInitWindowPosition (100, 100);'
echo '    glutCreateWindow (argv[0]);'
echo '	'
echo '	InitGL();'
echo ' '
echo '    glutDisplayFunc(DrawGLScene); '
echo '    glutReshapeFunc(ReSizeGLScene);'
echo '    glutIdleFunc(Idle);'
echo '	'
echo '	xrot = 0;'
echo '	yrot = 0;		'
echo '	zrot = 0;'
echo '	'
echo '    glutMainLoop();'
echo '  '
echo '    return 0;'
echo '}'
echo ''
echo '// InitGL --------------------------------------------------------------------'
echo ''
echo 'GLvoid InitGL(GLvoid)'
echo '{'
echo '	'
echo '	LoadGLTextures();							// Load The Texture(s) ( NEW )'
echo '	glEnable(GL_TEXTURE_2D);					// Enable Texture Mapping ( NEW )'
echo '	'
echo '	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);		// This Will Clear The Background Color To Black'
echo '	glClearDepth(1.0);							// Enables Clearing Of The Depth Buffer'
echo '	glDepthFunc(GL_LESS);						// The Type Of Depth Test To Do'
echo '	glEnable(GL_DEPTH_TEST);					// Enables Depth Testing '
echo '	glShadeModel(GL_SMOOTH);					// Enables Smooth Color Shading'
echo ''
echo '	glMatrixMode(GL_PROJECTION);'
echo '	glLoadIdentity();							// Reset The Projection Matrix'
echo ''
echo '	gluPerspective(45.0f, (GLfloat) kWindowWidth / (GLfloat) kWindowHeight, 0.1f, 100.0f);	'
echo '												// Calculate The Aspect Ratio Of The Window'
echo ''
echo '	glMatrixMode(GL_MODELVIEW);'
echo ''
echo '}'
echo ''
echo '// Idle ----------------------------------------------------------------------'
echo ''
echo 'GLvoid Idle(GLvoid)'
echo '{'
echo '	xrot += 0.3f;			// X Axis Rotation'
echo '	yrot += 0.2f;			// Y Axis Rotation'
echo '	zrot += 0.4f;			// Z Axis Rotation'
echo '	'
echo '	glutPostRedisplay();'
echo '}'
echo ''
echo '// DrawGLScene ---------------------------------------------------------------'
echo ''
echo 'GLvoid DrawGLScene(GLvoid)'
echo '{    '
echo '	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);'
echo '	glLoadIdentity();'
echo '	glTranslatef(0.0f,0.0f,-5.0f);'
echo '	'
echo '	glRotatef(xrot,1.0f,0.0f,0.0f);				// Rotate On The X Axis'
echo '	glRotatef(yrot,0.0f,1.0f,0.0f);				// Rotate On The Y Axis'
echo '	glRotatef(zrot,0.0f,0.0f,1.0f);				// Rotate On The Z Axis'
echo '	'
echo '	glBindTexture(GL_TEXTURE_2D, texture[0].texID);'
echo '	'
echo '	glBegin(GL_QUADS);'
echo '		// Front Face'
echo '		glTexCoord2f(0.0f, 0.0f); glVertex3f(-1.0f, -1.0f,  1.0f);	// Bottom Left Of The Texture and Quad'
echo '		glTexCoord2f(1.0f, 0.0f); glVertex3f( 1.0f, -1.0f,  1.0f);	// Bottom Right Of The Texture and Quad'
echo '		glTexCoord2f(1.0f, 1.0f); glVertex3f( 1.0f,  1.0f,  1.0f);	// Top Right Of The Texture and Quad'
echo '		glTexCoord2f(0.0f, 1.0f); glVertex3f(-1.0f,  1.0f,  1.0f);	// Top Left Of The Texture and Quad'
echo '		// Back Face'
echo '		glTexCoord2f(1.0f, 0.0f); glVertex3f(-1.0f, -1.0f, -1.0f);	// Bottom Right Of The Texture and Quad'
echo '		glTexCoord2f(1.0f, 1.0f); glVertex3f(-1.0f,  1.0f, -1.0f);	// Top Right Of The Texture and Quad'
echo '		glTexCoord2f(0.0f, 1.0f); glVertex3f( 1.0f,  1.0f, -1.0f);	// Top Left Of The Texture and Quad'
echo '		glTexCoord2f(0.0f, 0.0f); glVertex3f( 1.0f, -1.0f, -1.0f);	// Bottom Left Of The Texture and Quad'
echo '		// Top Face'
echo '		glTexCoord2f(0.0f, 1.0f); glVertex3f(-1.0f,  1.0f, -1.0f);	// Top Left Of The Texture and Quad'
echo '		glTexCoord2f(0.0f, 0.0f); glVertex3f(-1.0f,  1.0f,  1.0f);	// Bottom Left Of The Texture and Quad'
echo '		glTexCoord2f(1.0f, 0.0f); glVertex3f( 1.0f,  1.0f,  1.0f);	// Bottom Right Of The Texture and Quad'
echo '		glTexCoord2f(1.0f, 1.0f); glVertex3f( 1.0f,  1.0f, -1.0f);	// Top Right Of The Texture and Quad'
echo '		// Bottom Face'
echo '		glTexCoord2f(1.0f, 1.0f); glVertex3f(-1.0f, -1.0f, -1.0f);	// Top Right Of The Texture and Quad'
echo '		glTexCoord2f(0.0f, 1.0f); glVertex3f( 1.0f, -1.0f, -1.0f);	// Top Left Of The Texture and Quad'
echo '		glTexCoord2f(0.0f, 0.0f); glVertex3f( 1.0f, -1.0f,  1.0f);	// Bottom Left Of The Texture and Quad'
echo '		glTexCoord2f(1.0f, 0.0f); glVertex3f(-1.0f, -1.0f,  1.0f);	// Bottom Right Of The Texture and Quad'
echo '		// Right face'
echo '		glTexCoord2f(1.0f, 0.0f); glVertex3f( 1.0f, -1.0f, -1.0f);	// Bottom Right Of The Texture and Quad'
echo '		glTexCoord2f(1.0f, 1.0f); glVertex3f( 1.0f,  1.0f, -1.0f);	// Top Right Of The Texture and Quad'
echo '		glTexCoord2f(0.0f, 1.0f); glVertex3f( 1.0f,  1.0f,  1.0f);	// Top Left Of The Texture and Quad'
echo '		glTexCoord2f(0.0f, 0.0f); glVertex3f( 1.0f, -1.0f,  1.0f);	// Bottom Left Of The Texture and Quad'
echo '		// Left Face'
echo '		glTexCoord2f(0.0f, 0.0f); glVertex3f(-1.0f, -1.0f, -1.0f);	// Bottom Left Of The Texture and Quad'
echo '		glTexCoord2f(1.0f, 0.0f); glVertex3f(-1.0f, -1.0f,  1.0f);	// Bottom Right Of The Texture and Quad'
echo '		glTexCoord2f(1.0f, 1.0f); glVertex3f(-1.0f,  1.0f,  1.0f);	// Top Right Of The Texture and Quad'
echo '		glTexCoord2f(0.0f, 1.0f); glVertex3f(-1.0f,  1.0f, -1.0f);	// Top Left Of The Texture and Quad'
echo '	glEnd();'
echo '	'
echo '	'
echo '	'
echo '    glutSwapBuffers();'
echo '    glFlush();'
echo '}'
echo ''
echo '// ReSizeGLScene ------------------------------------------------------------'
echo ''
echo 'GLvoid ReSizeGLScene(int Width, int Height)'
echo '{'
echo '    glViewport (0, 0, (GLsizei) Width, (GLsizei) Height);'
echo '    glMatrixMode(GL_PROJECTION);'
echo '    glLoadIdentity();'
echo ''
echo '    gluPerspective(45.0, (GLfloat) Width / (GLfloat) Height, 0.1, 100.0);'
echo '   '
echo '    glMatrixMode(GL_MODELVIEW);'
echo '    glLoadIdentity();'
echo '}'
echo ''
echo '// LoadGLTextures ----------------------------------------------------------'
echo ''
echo 'GLvoid LoadGLTextures(GLvoid)'
echo '{'
echo '	LoadTGA(texture, "Data/NeHe.tga");'
echo '}'
echo ''
echo '/********************> LoadTGA() <*****/'
echo 'bool LoadTGA(TextureImage *texture, char *filename)			// Loads A TGA File Into Memory'
echo '{    '
echo '	GLubyte		TGAheader[12]={0,0,2,0,0,0,0,0,0,0,0,0};	// Uncompressed TGA Header'
echo '	GLubyte		TGAcompare[12];								// Used To Compare TGA Header'
echo '	GLubyte		header[6];									// First 6 Useful Bytes From The Header'
echo '	GLuint		bytesPerPixel;								// Holds Number Of Bytes Per Pixel Used In The TGA File'
echo '	GLuint		imageSize;									// Used To Store The Image Size When Setting Aside Ram'
echo '	GLuint		temp;										// Temporary Variable'
echo '	GLuint		type=GL_RGBA;								// Set The Default GL Mode To RBGA (32 BPP)'
echo ''
echo '	FILE *file = fopen(filename, "rb");						// Open The TGA File'
echo ''
echo '	if(	file==NULL ||										// Does File Even Exist?'
echo '		fread(TGAcompare,1,sizeof(TGAcompare),file)!=sizeof(TGAcompare) ||	// Are There 12 Bytes To Read?'
echo '		memcmp(TGAheader,TGAcompare,sizeof(TGAheader))!=0				||	// Does The Header Match What We Want?'
echo '		fread(header,1,sizeof(header),file)!=sizeof(header))				// If So Read Next 6 Header Bytes'
echo '	{'
echo '		fclose(file);										// If Anything Failed, Close The File'
echo '		return false;										// Return False'
echo '	}'
echo ''
echo '	texture->width  = header[1] * 256 + header[0];			// Determine The TGA Width	(highbyte*256+lowbyte)'
echo '	texture->height = header[3] * 256 + header[2];			// Determine The TGA Height	(highbyte*256+lowbyte)'
echo '    '
echo ' 	if(	texture->width	<=0	||								// Is The Width Less Than Or Equal To Zero'
echo '		texture->height	<=0	||								// Is The Height Less Than Or Equal To Zero'
echo '		(header[4]!=24 && header[4]!=32))					// Is The TGA 24 or 32 Bit?'
echo '	{'
echo '		fclose(file);										// If Anything Failed, Close The File'
echo '		return false;										// Return False'
echo '	}'
echo ''
echo '	texture->bpp	= header[4];							// Grab The TGA'"'"'s Bits Per Pixel (24 or 32)'
echo '	bytesPerPixel	= texture->bpp/8;						// Divide By 8 To Get The Bytes Per Pixel'
echo '	imageSize		= texture->width*texture->height*bytesPerPixel;	// Calculate The Memory Required For The TGA Data'
echo ''
echo '	texture->imageData=(GLubyte *)malloc(imageSize);		// Reserve Memory To Hold The TGA Data'
echo ''
echo '	if(	texture->imageData==NULL ||							// Does The Storage Memory Exist?'
echo '		fread(texture->imageData, 1, imageSize, file)!=imageSize)	// Does The Image Size Match The Memory Reserved?'
echo '	{'
echo '		if(texture->imageData!=NULL)						// Was Image Data Loaded'
echo '			free(texture->imageData);						// If So, Release The Image Data'
echo ''
echo '		fclose(file);										// Close The File'
echo '		return false;										// Return False'
echo '	}'
echo 'GLuint i = 0;'
echo '	for(;i<(int)(imageSize); i+=bytesPerPixel)		// Loop Through The Image Data'
echo '	{														// Swaps The 1st And 3rd Bytes ('"'"'R'"'"'ed and '"'"'B'"'"'lue)'
echo '		temp=texture->imageData[i];							// Temporarily Store The Value At Image Data '"'"'i'"'"''
echo '		texture->imageData[i] = texture->imageData[i + 2];	// Set The 1st Byte To The Value Of The 3rd Byte'
echo '		texture->imageData[i + 2] = temp;					// Set The 3rd Byte To The Value In '"'"'temp'"'"' (1st Byte Value)'
echo '	}'
echo ''
echo '	fclose (file);											// Close The File'
echo ''
echo '	// Build A Texture From The Data'
echo '	glGenTextures(1, &texture[0].texID);					// Generate OpenGL texture IDs'
echo ''
echo '	glBindTexture(GL_TEXTURE_2D, texture[0].texID);			// Bind Our Texture'
echo '	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);	// Linear Filtered'
echo '	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);	// Linear Filtered'
echo '	'
echo '	if (texture[0].bpp==24)									// Was The TGA 24 Bits'
echo '	{'
echo '		type=GL_RGB;										// If So Set The '"'"'type'"'"' To GL_RGB'
echo '	}'
echo ''
echo '	glTexImage2D(GL_TEXTURE_2D, 0, type, texture[0].width, texture[0].height, 0, type, GL_UNSIGNED_BYTE, texture[0].imageData);'
echo ''
echo '	return true;											// Texture Building Went Ok, Return True'
echo '}'
fi > lesson6.c

echo "create makefile ..."
if [ "1" ] ; then 
echo 'INCLUDE = -I/usr/X11R6/include'
echo 'LIBDIR  = -L/usr/X11R6/lib'
echo ''
echo 'COMPILERFLAGS = -Wall'
echo 'CC = gcc'
echo 'CFLAGS = $(COMPILERFLAGS) $(INCLUDE)'
echo 'LIBRARIES =  -lglut -lGL -lGLU -lX11 -lm -L/usr/X11R6/lib'
echo ''
echo '# for all, set the targets to be every lesson1.c-lesson13.c '
echo '# file, removing the .c extension.  That is, at this point,'
echo '# it would produce lesson1, lesson2, lesson3,...,lesson13 targets.'
echo '#'
echo 'all: $(basename $(wildcard lesson[1-9].c lesson1[0-3].c lesson[1-9].cpp lesson1[0-3].cpp))'
echo ''
echo '# same as for all, except set the targets to be '
echo '# lessonX.tar.gz from lessonX.c.  This is really'
echo '# only used to build smaller tutorial .tar.gz files'
echo '# to send to nehe.'
echo '#'
echo 'dist: $(foreach file,$(basename $(wildcard lesson[1-9].c lesson1[0-3].c)),$(file).tar.gz)'
echo ''
echo '# to produce, say, lesson1.tar.gz:'
echo '#'
echo '# 1. remove lesson1.tar.gz'
echo '# 2. build lesson1.tar containing README, makefile, lesson1.c, Data/lesson1/*.'
echo '# 3. gzip lesson1.tar.'
echo '#'
echo 'lesson%.tar.gz : '
echo '	tar cvf $(subst .tar.gz,.tar,$@) README makefile $(subst .tar.gz,.c,$@) $(wildcard Data/$(subst .tar.gz,,$@)/*); \'
echo '	gzip $(subst .tar.gz,.tar,$@);'
echo ''
echo '# to produce, say, lesson1:'
echo '#'
echo '# 1. compile the thing.  uses the variables defined above.'
echo '# '
echo 'lesson% : lesson%.o'
echo '	$(CC) $(CFLAGS) -o $@ $(LIBDIR) $< $(LIBRARIES)  '
echo ''
echo '# to clean up:'
echo '# delete all of the lessonX files.'
echo 'clean:'
echo '	rm $(wildcard lesson[1-9] lesson1[0-3])'
echo ''
echo '# to clean up the distributions:'
echo '# delete all of the lessonX.tar.gz files.'
echo 'distclean:'
echo '	rm $(wildcard lesson[1-9].tar.gz lesson1[0-3].tar.gz)'
echo ''
fi > makefile

