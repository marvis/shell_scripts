echo "create glwidget.cpp ..."
if [ "1" ] ; then 
echo '#include <QtGui>'
echo '#include <QtOpenGL>'
echo ''
echo '#include <math.h>'
echo ''
echo '#include "glwidget.h"'
echo ''
echo '#ifndef GL_MULTISAMPLE'
echo '#define GL_MULTISAMPLE  0x809D'
echo '#endif'
echo ''
echo 'GLWidget::GLWidget(QWidget *parent)'
echo '    : QGLWidget(QGLFormat(QGL::SampleBuffers), parent)'
echo '{'
echo '    xRot = 0;'
echo '    yRot = 0;'
echo '    zRot = 0;'
echo ''
echo '    qtGreen = QColor::fromCmykF(0.40, 0.0, 1.0, 0.0);'
echo '    qtPurple = QColor::fromCmykF(0.39, 0.39, 0.0, 0.0);'
echo '}'
echo ''
echo 'GLWidget::~GLWidget()'
echo '{'
echo '}'
echo ''
echo 'QSize GLWidget::minimumSizeHint() const'
echo '{'
echo '    return QSize(50, 50);'
echo '}'
echo ''
echo 'QSize GLWidget::sizeHint() const'
echo '{'
echo '    return QSize(400, 400);'
echo '}'
echo ''
echo 'static void qNormalizeAngle(int &angle)'
echo '{'
echo '    while (angle < 0)'
echo '        angle += 360 * 16;'
echo '    while (angle > 360 * 16)'
echo '        angle -= 360 * 16;'
echo '}'
echo ''
echo 'void GLWidget::setXRotation(int angle)'
echo '{'
echo '    qNormalizeAngle(angle);'
echo '    if (angle != xRot) {'
echo '        xRot = angle;'
echo '        emit xRotationChanged(angle);'
echo '        updateGL();'
echo '    }'
echo '}'
echo ''
echo 'void GLWidget::setYRotation(int angle)'
echo '{'
echo '    qNormalizeAngle(angle);'
echo '    if (angle != yRot) {'
echo '        yRot = angle;'
echo '        emit yRotationChanged(angle);'
echo '        updateGL();'
echo '    }'
echo '}'
echo ''
echo 'void GLWidget::setZRotation(int angle)'
echo '{'
echo '    qNormalizeAngle(angle);'
echo '    if (angle != zRot) {'
echo '        zRot = angle;'
echo '        emit zRotationChanged(angle);'
echo '        updateGL();'
echo '    }'
echo '}'
echo ''
echo 'void GLWidget::initializeGL()'
echo '{'
echo '    qglClearColor(qtPurple.dark());'
echo ''
echo '    glEnable(GL_DEPTH_TEST);'
echo '    glEnable(GL_CULL_FACE);'
echo '    glShadeModel(GL_SMOOTH);'
echo '    glEnable(GL_LIGHTING);'
echo '    glEnable(GL_LIGHT0);'
echo '    glEnable(GL_MULTISAMPLE);'
echo '    static GLfloat lightPosition[4] = { 0.5, 5.0, 7.0, 1.0 };'
echo '    glLightfv(GL_LIGHT0, GL_POSITION, lightPosition);'
echo '}'
echo ''
echo 'void GLWidget::paintGL()'
echo '{'
echo '    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);'
echo '    glLoadIdentity();'
echo '    glTranslatef(0.0, 0.0, -10.0);'
echo '    glRotatef(xRot / 16.0, 1.0, 0.0, 0.0);'
echo '    glRotatef(yRot / 16.0, 0.0, 1.0, 0.0);'
echo '    glRotatef(zRot / 16.0, 0.0, 0.0, 1.0);'
echo '}'
echo ''
echo 'void GLWidget::resizeGL(int width, int height)'
echo '{'
echo '    int side = qMin(width, height);'
echo '    glViewport((width - side) / 2, (height - side) / 2, side, side);'
echo ''
echo '    glMatrixMode(GL_PROJECTION);'
echo '    glLoadIdentity();'
echo '#ifdef QT_OPENGL_ES_1'
echo '    glOrthof(-0.5, +0.5, -0.5, +0.5, 4.0, 15.0);'
echo '#else'
echo '    glOrtho(-0.5, +0.5, -0.5, +0.5, 4.0, 15.0);'
echo '#endif'
echo '    glMatrixMode(GL_MODELVIEW);'
echo '}'
echo ''
echo 'void GLWidget::mousePressEvent(QMouseEvent *event)'
echo '{'
echo '    lastPos = event->pos();'
echo '}'
echo ''
echo 'void GLWidget::mouseMoveEvent(QMouseEvent *event)'
echo '{'
echo '    int dx = event->x() - lastPos.x();'
echo '    int dy = event->y() - lastPos.y();'
echo ''
echo '    if (event->buttons() & Qt::LeftButton) {'
echo '        setXRotation(xRot + 8 * dy);'
echo '        setYRotation(yRot + 8 * dx);'
echo '    } else if (event->buttons() & Qt::RightButton) {'
echo '        setXRotation(xRot + 8 * dy);'
echo '        setZRotation(zRot + 8 * dx);'
echo '    }'
echo '    lastPos = event->pos();'
echo '}'
fi > glwidget.cpp

echo "create glwidget.h ..."
if [ "1" ] ; then 
echo '#ifndef GLWIDGET_H'
echo '#define GLWIDGET_H'
echo ''
echo '#include <QGLWidget>'
echo ''
echo 'class GLWidget : public QGLWidget'
echo '{'
echo '    Q_OBJECT'
echo ''
echo 'public:'
echo '    GLWidget(QWidget *parent = 0);'
echo '    ~GLWidget();'
echo ''
echo '    QSize minimumSizeHint() const;'
echo '    QSize sizeHint() const;'
echo ''
echo 'public slots:'
echo '    void setXRotation(int angle);'
echo '    void setYRotation(int angle);'
echo '    void setZRotation(int angle);'
echo ''
echo 'signals:'
echo '    void xRotationChanged(int angle);'
echo '    void yRotationChanged(int angle);'
echo '    void zRotationChanged(int angle);'
echo ''
echo 'protected:'
echo '    void initializeGL();'
echo '    void paintGL();'
echo '    void resizeGL(int width, int height);'
echo '    void mousePressEvent(QMouseEvent *event);'
echo '    void mouseMoveEvent(QMouseEvent *event);'
echo ''
echo 'private:'
echo '    int xRot;'
echo '    int yRot;'
echo '    int zRot;'
echo '    QPoint lastPos;'
echo '    QColor qtGreen;'
echo '    QColor qtPurple;'
echo '};'
echo ''
echo '#endif'
fi > glwidget.h

echo "create main.cpp ..."
if [ "1" ] ; then 
echo '#include <QApplication>'
echo '#include "glwidget.h"'
echo ''
echo 'int main(int argc, char * argv[])'
echo '{'
echo '	QApplication app(argc, argv);'
echo '	GLWidget* glwidget = new GLWidget();'
echo '	glwidget->show();'
echo '	return app.exec();'
echo '}'
fi > main.cpp

echo "create opengl.pro ..."
if [ "1" ] ; then 
echo '######################################################################'
echo '# Automatically generated by qmake (2.01a) Thu Jun 23 00:07:41 2011'
echo '######################################################################'
echo ''
echo 'TEMPLATE = app'
echo 'QT += opengl'
echo ''
echo 'TARGET = '
echo 'DEPENDPATH += .'
echo 'INCLUDEPATH += .'
echo ''
echo '# Input'
echo 'HEADERS += glwidget.h'
echo 'SOURCES += glwidget.cpp main.cpp'
fi > opengl.pro

